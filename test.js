import { call, put } from "redux-saga/effects";
import ApiHandler from "store/apiHandlers";
import {
  API_ENDPOINT,
  PACKET_DOCUMENTS_RESULTS_LIMIT,
  SEARCH_RESULTS_LIMIT,
  VERSIONS,
} from "store/constants";
import { getApiDate, getErrorMessage } from "store/utils";
import { searchActions } from "../search.actions";

export function* searchDocument({ payload: documentSearchData }) {
  const requestData = prepareRequestData(documentSearchData);

  try {
    const response = yield call(submitDocumentSearch, requestData);
    const searchResults = getSearchResults(response.data);
    yield put({
      type: searchActions.DOCUMENT_SEARCH_SUCCESS,
      payload: { ...searchResults },
    });
  } catch (error) {
    const errorObject = getErrorMessage(error);
    yield put({
      type: searchActions.DOCUMENT_SEARCH_FAILURE,
      payload: errorObject,
    });
  }
}
export function* submitDocumentSearch(requestData) {
  const url = API_ENDPOINT.PPE_DOCUMENT_SEARCH_URL;
  const apiHandler = new ApiHandler({ url, method: "POST", data: requestData });
  const response = yield apiHandler.makeRequest();
  return response;
}

export function* getDocumentPdf({ payload: documentDetails }) {
  try {
    const response = yield call(submitGetDocumentPdf, documentDetails);
    yield put({
      type: searchActions.GET_DOCUMENT_PDF_SUCCESS,
      payload: { ...response },
    });
  } catch (error) {
    const errorObject = getErrorMessage(error);
    yield put({
      type: searchActions.GET_DOCUMENT_PDF_FAILURE,
      payload: errorObject,
    });
  }
}

export function* submitGetDocumentPdf(requestData) {
  const params = {
    ...requestData,
  };
  const url = API_ENDPOINT.PPE_GET_DOCUMENT_PDF;
  const apiHandler = new ApiHandler({ url, params, method: "GET" });
  const response = yield apiHandler.makeRequest();
  return response;
}

export const getRequestData = (documentSearchData) => {
  return {
    document_id: documentSearchData.documentId || undefined,
    packet_id: documentSearchData.packetId || undefined,
    document_number: documentSearchData.documentNumber || undefined,
    document_customer_name:
      documentSearchData.documentCustomerName || undefined,
    guarantee_given_by: documentSearchData.givenBy || undefined,
    document_folder:
      documentSearchData.documentVersion &&
      documentSearchData.documentVersion !== VERSIONS.ALL
        ? documentSearchData.documentVersion
        : undefined,
    document_type:
      documentSearchData.documentType &&
      parseInt(documentSearchData.documentType) !== 0
        ? [parseInt(documentSearchData.documentType)]
        : undefined,
    document_sub_type:
      documentSearchData.documentSubtype &&
      parseInt(documentSearchData.documentSubtype) !== 0
        ? [parseInt(documentSearchData.documentSubtype)]
        : undefined,
    date_created_gte: documentSearchData.documentScannedFromDate
      ? getApiDate(documentSearchData.documentScannedFromDate)
      : undefined,
    date_created_lte: documentSearchData.documentScannedToDate
      ? getApiDate(documentSearchData.documentScannedToDate)
      : undefined,
  };
};
export const prepareRequestData = (documentSearchData) => {
  const { useHigherResultLimit } = documentSearchData;
  const requestData = {
    search_params: {},
    search_options: {
      sort_by: "1",
      sort_asc: false,
      return_parent_packet_details: false,
      offset: 0,
      limit: useHigherResultLimit
        ? PACKET_DOCUMENTS_RESULTS_LIMIT
        : SEARCH_RESULTS_LIMIT,
    },
  };
  requestData["search_params"] = getRequestData(documentSearchData);
  return requestData;
};

export const getSearchResults = (responseData) => {
  return {
    documents: responseData.documents,
    totalRecords: responseData.meta["total_records"],
    returnedRecords: responseData.meta["records_returned"],
  };
};
